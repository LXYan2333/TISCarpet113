--- a/net/minecraft/util/ClassInheritanceMultiMap.java
+++ b/net/minecraft/util/ClassInheritanceMultiMap.java
@@ -4,13 +4,11 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.AbstractSet;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import me.jellysquid.mods.lithium.config.LiConfig;
 
+import java.util.*;
+import java.util.stream.Collectors;
+
 public class ClassInheritanceMultiMap<T> extends AbstractSet<T>
 {
     private static final Set < Class<? >> ALL_KNOWN = Sets.newHashSet();
@@ -118,6 +116,11 @@
 
     public <S> Iterable<S> getByClass(Class<S> clazz)
     {
+        if (LiConfig.FastContainers.fastClassInheritanceMultiMap)
+        {
+            return getByClass_new(clazz);
+        }
+
         return () ->
         {
             List<T> list = this.map.get(this.initializeClassLookup(clazz));
@@ -134,6 +137,19 @@
         };
     }
 
+    public <S> Iterable<S> getByClass_new(Class<S> clazz)
+    {
+        List<T> list = this.map.computeIfAbsent(clazz, (t) -> {
+            if (!this.baseClass.isAssignableFrom(t)) {
+                throw new IllegalArgumentException("Don't know how to search for " + t);
+            }
+
+            return this.values.stream().filter(t::isInstance).collect(Collectors.toList());
+        });
+
+        return (Collection<S>) Collections.unmodifiableCollection(list);
+    }
+
     public Iterator<T> iterator()
     {
         return (Iterator<T>)(this.values.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.values.iterator()));
