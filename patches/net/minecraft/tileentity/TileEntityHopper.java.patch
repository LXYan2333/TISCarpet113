--- a/net/minecraft/tileentity/TileEntityHopper.java
+++ b/net/minecraft/tileentity/TileEntityHopper.java
@@ -4,6 +4,12 @@
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import carpet.helpers.HopperCounter;
+import carpet.settings.CarpetSettings;
+import carpet.utils.InventoryOptimizer;
+import carpet.utils.OptimizedInventory;
+import carpet.utils.WoolTool;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.block.BlockHopper;
@@ -17,6 +23,7 @@
 import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.ISidedInventory;
 import net.minecraft.inventory.ItemStackHelper;
+import net.minecraft.item.EnumDyeColor;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.EntitySelectors;
@@ -150,6 +157,29 @@
 
                 if (flag)
                 {
+                    if (CarpetSettings.hopperCounters && CarpetSettings.hopperCountersUnlimitedSpeed)  // TISCM hopperCountersUnlimitedSpeed
+                    {
+                        EnumDyeColor wool_color = WoolTool.getWoolColorAtPosition(world, new BlockPos(this.getXPos(), this.getYPos(), this.getZPos()).offset(this.getBlockState().get(BlockHopper.FACING)));
+                        if (wool_color != null)
+                        {
+                            for (int i = 0; i < Short.MAX_VALUE; i++)
+                            {
+                                boolean working = false;
+                                if (!this.isInventoryEmpty())
+                                {
+                                    working = this.transferItemsOut();
+                                }
+                                if (!this.isFull())
+                                {
+                                    working |= p_200109_1_.get();
+                                }
+                                if (!working)
+                                {
+                                    break;
+                                }
+                            }
+                        }
+                    }
                     this.setTransferCooldown(8);
                     this.markDirty();
                     return true;
@@ -197,6 +227,29 @@
 
     private boolean transferItemsOut()
     {
+        /* carpet mod */
+        if (CarpetSettings.hopperCounters)
+        {
+            EnumDyeColor wool_color = WoolTool.getWoolColorAtPosition(
+                    getWorld(),
+                    new BlockPos(getXPos(),getYPos(),getZPos() ).offset(this.getBlockState().get(BlockHopper.FACING)));
+
+            if (wool_color != null)
+            {
+                for (int i = 0; i < this.getSizeInventory(); ++i)
+                {
+                    if (!this.getStackInSlot(i).isEmpty())
+                    {
+                        ItemStack itemstack = this.getStackInSlot(i);
+                        HopperCounter.COUNTERS.get(wool_color).add(this.getWorld().getServer(), itemstack);
+                        this.setInventorySlotContents(i, ItemStack.EMPTY);
+                    }
+                }
+                return true;
+            }
+        }
+        /* end */
+
         IInventory iinventory = this.getInventoryForHopperTransfer();
 
         if (iinventory == null)
@@ -377,6 +430,10 @@
 
     public static boolean captureItem(IInventory p_200114_0_, EntityItem p_200114_1_)
     {
+        if (p_200114_1_.removed)  // TISCM to avoid repeatedly extraction an item entity in onEntityCollided for hopperCountersUnlimitedSpeed
+        {
+            return false;
+        }
         boolean flag = false;
         ItemStack itemstack = p_200114_1_.getItem().copy();
         ItemStack itemstack1 = putStackInInventoryAllSlots((IInventory)null, p_200114_0_, itemstack, (EnumFacing)null);
@@ -396,6 +453,28 @@
 
     public static ItemStack putStackInInventoryAllSlots(@Nullable IInventory source, IInventory destination, ItemStack stack, @Nullable EnumFacing direction)
     {
+        // [TISCM] Optimized inventories - start
+        if (destination instanceof OptimizedInventory)
+        {
+            OptimizedInventory optoTo = (OptimizedInventory) destination;
+            InventoryOptimizer optimizer = optoTo.getOptimizer();
+            if (optimizer != null)
+            {
+                while (!stack.isEmpty())
+                {
+                    int index = optimizer.findInsertSlot(stack);
+                    if (index == -1)
+                        break;
+                    int count = stack.getCount();
+                    stack = insertStack(source, destination, stack, index, direction);
+                    if (stack.getCount() == count)
+                        break;
+                }
+                return stack;
+            }
+        }
+        // [TISCM] Optimized inventories - end
+        
         if (destination instanceof ISidedInventory && direction != null)
         {
             ISidedInventory isidedinventory = (ISidedInventory)destination;
