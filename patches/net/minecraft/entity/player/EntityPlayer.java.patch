--- a/net/minecraft/entity/player/EntityPlayer.java
+++ b/net/minecraft/entity/player/EntityPlayer.java
@@ -1,5 +1,10 @@
 package net.minecraft.entity.player;
 
+import carpet.helpers.PortalHelper;
+import carpet.logging.LoggerRegistry;
+import carpet.logging.logHelpers.DamageReporter;
+import carpet.logging.logHelpers.KillLogHelper;
+import carpet.settings.CarpetSettings;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import java.nio.charset.StandardCharsets;
@@ -180,9 +185,9 @@
 
     public void tick()
     {
-        this.noClip = this.isSpectator();
+        this.noClip = this.isSpectator() || (CarpetSettings.creativeNoClip && this.abilities.isFlying);
 
-        if (this.isSpectator())
+        if (this.noClip)
         {
             this.onGround = false;
         }
@@ -436,7 +441,17 @@
 
     public int getMaxInPortalTime()
     {
-        return this.abilities.disableDamage ? 1 : 80;
+        //return this.abilities.disableDamage ? 1 : 80;
+        if (!this.abilities.disableDamage) return 80;
+        if (CarpetSettings.portalCreativeDelay)
+        {
+            if ( PortalHelper.player_holds_obsidian(this))
+            {
+                return 72000;
+            }
+            return 80;
+        }
+        return 1;
     }
 
     protected SoundEvent getSwimSound()
@@ -608,7 +623,7 @@
         this.cameraYaw += (f - this.cameraYaw) * 0.4F;
         this.cameraPitch += (f1 - this.cameraPitch) * 0.8F;
 
-        if (this.getHealth() > 0.0F && !this.isSpectator())
+        if (this.getHealth() > 0.0F && !(this.isSpectator() || (CarpetSettings.creativeNoClip && this.abilities.isFlying)))
         {
             AxisAlignedBB axisalignedbb;
 
@@ -637,8 +652,9 @@
         this.playShoulderEntityAmbientSound(this.getLeftShoulderEntity());
         this.playShoulderEntityAmbientSound(this.getRightShoulderEntity());
 
-        if (!this.world.isRemote && (this.fallDistance > 0.5F || this.isInWater() || this.isPassenger()) || this.abilities.isFlying)
-        {
+        //[CM] Conditions For Persistent Parrots
+        boolean parrots_will_drop = !CarpetSettings.persistentParrots || this.abilities.disableDamage;
+        if (!this.world.isRemote && ((parrots_will_drop && this.fallDistance > 0.5F) || this.isInWater() || (parrots_will_drop && this.isPassenger()) ) || this.abilities.isFlying ) {
             this.spawnShoulderEntities();
         }
     }
@@ -991,10 +1007,23 @@
                     this.wakeUpPlayer(true, true, false);
                 }
 
-                this.spawnShoulderEntities();
+                // this.spawnShoulderEntities();     // [CM] Removed line
+                // [CM] PersistentParrots - Optionally Dismount Parrots
+                if (CarpetSettings.persistentParrots && !this.isSneaking())
+                {
+                    if (this.rand.nextFloat() < ((amount)/15.0) )
+                    {
+                        this.dismount_left();
+                    }
+                    if (this.rand.nextFloat() < ((amount)/15.0) )
+                    {
+                        this.dismount_right();
+                    }
+                }
 
                 if (source.isDifficultyScaled())
                 {
+                    float prevamount = amount; //CM
                     if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL)
                     {
                         amount = 0.0F;
@@ -1009,6 +1038,8 @@
                     {
                         amount = amount * 3.0F / 2.0F;
                     }
+                    DamageReporter.modify_damage(this, source, prevamount, amount, "difficulty"); //CM
+
                 }
 
                 return amount == 0.0F ? false : super.attackEntityFrom(source, amount);
@@ -1091,11 +1122,19 @@
     {
         if (!this.isInvulnerableTo(damageSrc))
         {
+            float previous_amount = damageAmount; //CM
             damageAmount = this.applyArmorCalculations(damageSrc, damageAmount);
+
+            DamageReporter.modify_damage(this, damageSrc, previous_amount, damageAmount, //CM
+                    String.format("armour %.1f and toughness %.1f", (float)this.getTotalArmorValue(), (float)this.getAttribute(SharedMonsterAttributes.ARMOR_TOUGHNESS).getValue())); //CM
+
             damageAmount = this.applyPotionDamageCalculations(damageSrc, damageAmount);
             float f = damageAmount;
             damageAmount = Math.max(damageAmount - this.getAbsorptionAmount(), 0.0F);
             this.setAbsorptionAmount(this.getAbsorptionAmount() - (f - damageAmount));
+
+            DamageReporter.modify_damage(this, damageSrc, damageAmount, f, "Absorbtion"); //CM
+
             float f1 = f - damageAmount;
 
             if (f1 > 0.0F && f1 < 3.4028235E37F)
@@ -1107,6 +1146,7 @@
             {
                 this.addExhaustion(damageSrc.getHungerDamage());
                 float f2 = this.getHealth();
+                DamageReporter.register_final_damage(this, damageSrc, damageAmount); //CM
                 this.setHealth(this.getHealth() - damageAmount);
                 this.getCombatTracker().trackDamage(damageSrc, f2, damageAmount);
 
@@ -1116,6 +1156,12 @@
                 }
             }
         }
+        //CM
+        else
+        {
+            DamageReporter.modify_damage(this, damageSrc, damageAmount, 0.0f, "invulnerability to the damage source");
+        }
+        //CM end
     }
 
     public void openSignEditor(TileEntitySign signTile)
@@ -1316,18 +1362,34 @@
                         {
                             float f3 = 1.0F + EnchantmentHelper.getSweepingDamageRatio(this) * f;
 
+                            //CM
+                            int mobs_smashed = 1;
+
                             for (EntityLivingBase entitylivingbase : this.world.getEntitiesWithinAABB(EntityLivingBase.class, targetEntity.getBoundingBox().grow(1.0D, 0.25D, 1.0D)))
                             {
                                 if (entitylivingbase != this && entitylivingbase != targetEntity && !this.isOnSameTeam(entitylivingbase) && (!(entitylivingbase instanceof EntityArmorStand) || !((EntityArmorStand)entitylivingbase).hasMarker()) && this.getDistanceSq(entitylivingbase) < 9.0D)
                                 {
                                     entitylivingbase.knockBack(this, 0.4F, (double)MathHelper.sin(this.rotationYaw * ((float)Math.PI / 180F)), (double)(-MathHelper.cos(this.rotationYaw * ((float)Math.PI / 180F))));
                                     entitylivingbase.attackEntityFrom(DamageSource.causePlayerDamage(this), f3);
+                                    //CM
+                                    mobs_smashed ++;
                                 }
                             }
 
+                            if (LoggerRegistry.__kills)
+                                KillLogHelper.onSweep(this.getGameProfile().getName(), mobs_smashed);
+
+
                             this.world.playSound((EntityPlayer)null, this.posX, this.posY, this.posZ, SoundEvents.ENTITY_PLAYER_ATTACK_SWEEP, this.getSoundCategory(), 1.0F, 1.0F);
                             this.spawnSweepParticles();
                         }
+                        //CM
+                        else
+                        {
+                            if (LoggerRegistry.__kills)
+                                KillLogHelper.onNonSweepAttack(this.getGameProfile().getName());
+                        }
+                        //CM end
 
                         if (targetEntity instanceof EntityPlayerMP && targetEntity.velocityChanged)
                         {
@@ -1422,6 +1484,13 @@
                     }
                 }
             }
+            //CM
+            else
+            {
+                if (LoggerRegistry.__kills)
+                    KillLogHelper.onDudHit(this.getGameProfile().getName());
+            }
+            //CM END
         }
     }
 
@@ -2241,6 +2310,20 @@
         this.setRightShoulderEntity(new NBTTagCompound());
     }
 
+    // [CM] PersistentParrots - Dismount Left Parrot
+    protected void dismount_left()
+    {
+        this.spawnShoulderEntity(this.getLeftShoulderEntity());
+        this.setLeftShoulderEntity(new NBTTagCompound());
+    }
+
+    // [CM] PersistentParrots - Dismount Right Parrot
+    protected void dismount_right()
+    {
+        this.spawnShoulderEntity(this.getRightShoulderEntity());
+        this.setRightShoulderEntity(new NBTTagCompound());
+    }
+
     private void spawnShoulderEntity(@Nullable NBTTagCompound p_192026_1_)
     {
         if (!this.world.isRemote && !p_192026_1_.isEmpty())
