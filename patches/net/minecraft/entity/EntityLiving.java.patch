--- a/net/minecraft/entity/EntityLiving.java
+++ b/net/minecraft/entity/EntityLiving.java
@@ -1,7 +1,11 @@
 package net.minecraft.entity;
 
+import carpet.logging.logHelpers.DamageReporter;
+import carpet.settings.CarpetSettings;
 import com.google.common.collect.Maps;
+
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
@@ -9,6 +13,7 @@
 import net.minecraft.block.BlockAbstractSkull;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.EnchantmentHelper;
+import net.minecraft.entity.ai.EntityAIBase;
 import net.minecraft.entity.ai.EntityAITasks;
 import net.minecraft.entity.ai.EntityJumpHelper;
 import net.minecraft.entity.ai.EntityLookHelper;
@@ -75,6 +80,9 @@
     protected PathNavigate navigator;
     protected final EntityAITasks tasks;
     protected final EntityAITasks targetTasks;
+    //[CM scarpet]
+    public final Map<String, EntityAIBase> temporaryTasks = new HashMap<>();
+    //
     private EntityLivingBase attackTarget;
     private final EntitySenses senses;
     private final NonNullList<ItemStack> inventoryHands = NonNullList.withSize(2, ItemStack.EMPTY);
@@ -89,7 +97,12 @@
     private boolean isLeashed;
     private Entity leashHolder;
     private NBTTagCompound leashNBTTag;
+    /**
+     * Lithium change
+     */
+    private static final EntityEquipmentSlot[] ENTITY_EQUIPMENT_SLOTS = EntityEquipmentSlot.values();
 
+
     protected EntityLiving(EntityType<?> type, World worldIn)
     {
         super(type, worldIn);
@@ -110,6 +123,13 @@
         }
     }
 
+    //[CM scarpet - access to tasks
+    public EntityAITasks getAI(boolean target)
+    {
+        return target?targetTasks:tasks;
+    }
+
+
     protected void initEntityAI()
     {
     }
@@ -423,6 +443,11 @@
 
             compound.put("Leash", nbttagcompound2);
         }
+        // [CM] Lead fix - Makes sure the leashNBTTag data is preseved
+        else if (CarpetSettings.leadFix && leashNBTTag != null)
+        {
+            compound.put("Leash", leashNBTTag);
+        }
 
         compound.putBoolean("LeftHanded", this.isLeftHanded());
 
@@ -912,7 +937,7 @@
 
     protected void dropEquipment(boolean wasRecentlyHit, int lootingModifier)
     {
-        for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
+        for (EntityEquipmentSlot entityequipmentslot : ENTITY_EQUIPMENT_SLOTS)
         {
             ItemStack itemstack = this.getItemStackFromSlot(entityequipmentslot);
             float f = this.getDropChance(entityequipmentslot);
@@ -973,7 +998,7 @@
 
             boolean flag = true;
 
-            for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
+            for (EntityEquipmentSlot entityequipmentslot : ENTITY_EQUIPMENT_SLOTS)
             {
                 if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.ARMOR)
                 {
@@ -1136,7 +1161,7 @@
             this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, EnchantmentHelper.addRandomEnchantment(this.rand, this.getHeldItemMainhand(), (int)(5.0F + f * (float)this.rand.nextInt(18)), false));
         }
 
-        for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
+        for (EntityEquipmentSlot entityequipmentslot : ENTITY_EQUIPMENT_SLOTS)
         {
             if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.ARMOR)
             {
@@ -1447,10 +1472,16 @@
         float f = (float)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue();
         int i = 0;
 
+        // CM
+        DamageReporter.register_damage_attacker( entityIn, this, f);
+        float ff = f;
+        // end CM
+
         if (entityIn instanceof EntityLivingBase)
         {
             f += EnchantmentHelper.getModifierForCreature(this.getHeldItemMainhand(), ((EntityLivingBase)entityIn).getCreatureAttribute());
             i += EnchantmentHelper.getKnockbackModifier(this);
+            DamageReporter.modify_damage((EntityLivingBase)entityIn, DamageSource.causeMobDamage(this), ff, f, "attacker enchants"); // CM
         }
 
         boolean flag = entityIn.attackEntityFrom(DamageSource.causeMobDamage(this), f);
