--- a/net/minecraft/world/Explosion.java
+++ b/net/minecraft/world/Explosion.java
@@ -1,13 +1,13 @@
 package net.minecraft.world;
 
+import carpet.settings.CarpetSettings;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-import java.util.Set;
+
+import java.util.*;
 import javax.annotation.Nullable;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.EnchantmentProtection;
@@ -17,6 +17,7 @@
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.fluid.IFluidState;
 import net.minecraft.init.Blocks;
+import net.minecraft.init.Fluids;
 import net.minecraft.init.Particles;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.util.DamageSource;
@@ -25,6 +26,8 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.world.chunk.Chunk;
+import net.minecraft.world.chunk.ChunkSection;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
@@ -43,6 +46,25 @@
     private final List<BlockPos> affectedBlockPositions = Lists.newArrayList();
     private final Map<EntityPlayer, Vec3d> playerKnockbackMap = Maps.newHashMap();
 
+    //TISCM cache explosions
+    private static Vec3d cachedPos = new Vec3d(0,0,0);
+    private static float cachedSize = 0;
+    private static long cachedTick = -1;
+    private static final Map<Entity, Vec3d> cachedMotionMap = Maps.newHashMap();
+    private static final Map<EntityPlayer, Vec3d> cachedKnockBackMap = Maps.newHashMap();
+
+    // Lithium world.explosions starts
+    private final BlockPos.MutableBlockPos cachedPos$lithium = new BlockPos.MutableBlockPos();
+
+    // The chunk coordinate of the most recently stepped through block.
+    private int prevChunkX = Integer.MIN_VALUE;
+    private int prevChunkZ = Integer.MIN_VALUE;
+
+    // The chunk belonging to prevChunkPos.
+    private Chunk prevChunk;
+
+    // Lithium world.explosions ends
+
     @OnlyIn(Dist.CLIENT)
     public Explosion(World worldIn, @Nullable Entity entityIn, double x, double y, double z, float size, List<BlockPos> affectedPositions)
     {
@@ -71,113 +93,117 @@
 
     public void doExplosionA()
     {
-        Set<BlockPos> set = Sets.newHashSet();
-        int i = 16;
+        // Lithium world.explosions starts
 
-        for (int j = 0; j < 16; ++j)
-        {
-            for (int k = 0; k < 16; ++k)
-            {
-                for (int l = 0; l < 16; ++l)
-                {
-                    if (j == 0 || j == 15 || k == 0 || k == 15 || l == 0 || l == 15)
-                    {
-                        double d0 = (double)((float)j / 15.0F * 2.0F - 1.0F);
-                        double d1 = (double)((float)k / 15.0F * 2.0F - 1.0F);
-                        double d2 = (double)((float)l / 15.0F * 2.0F - 1.0F);
-                        double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
-                        d0 = d0 / d3;
-                        d1 = d1 / d3;
-                        d2 = d2 / d3;
-                        float f = this.size * (0.7F + this.world.rand.nextFloat() * 0.6F);
-                        double d4 = this.x;
-                        double d6 = this.y;
-                        double d8 = this.z;
+        // Using integer encoding for the block positions provides a massive speedup and prevents us from needing to
+        // allocate a block position for every step we make along each ray, eliminating essentially all the memory
+        // allocations of this function. The overhead of packing block positions into integer format is negligible
+        // compared to a memory allocation and associated overhead of hashing real objects in a set.
+        final Set<BlockPos> touched = Sets.newHashSet();
 
-                        for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F)
-                        {
-                            BlockPos blockpos = new BlockPos(d4, d6, d8);
-                            IBlockState iblockstate = this.world.getBlockState(blockpos);
-                            IFluidState ifluidstate = this.world.getFluidState(blockpos);
+        final Random random = this.world.rand;
 
-                            if (!iblockstate.isAir() || !ifluidstate.isEmpty())
-                            {
-                                float f2 = Math.max(iblockstate.getBlock().getExplosionResistance(), ifluidstate.getExplosionResistance());
+        // Explosions work by casting many rays through the world from the origin of the explosion
+        for (int rayX = 0; rayX < 16; ++rayX) {
+            boolean xPlane = rayX == 0 || rayX == 15;
 
-                                if (this.exploder != null)
-                                {
-                                    f2 = this.exploder.getExplosionResistance(this, this.world, blockpos, iblockstate, ifluidstate, f2);
-                                }
+            for (int rayY = 0; rayY < 16; ++rayY) {
+                boolean yPlane = rayY == 0 || rayY == 15;
 
-                                f -= (f2 + 0.3F) * 0.3F;
-                            }
+                for (int rayZ = 0; rayZ < 16; ++rayZ) {
+                    boolean zPlane = rayZ == 0 || rayZ == 15;
 
-                            if (f > 0.0F && (this.exploder == null || this.exploder.canExplosionDestroyBlock(this, this.world, blockpos, iblockstate, f)))
-                            {
-                                set.add(blockpos);
-                            }
+                    // We only fire rays from the surface of our origin volume
+                    if (xPlane || yPlane || zPlane) {
+                        double vecX = (((float) rayX / 15.0F) * 2.0F) - 1.0F;
+                        double vecY = (((float) rayY / 15.0F) * 2.0F) - 1.0F;
+                        double vecZ = (((float) rayZ / 15.0F) * 2.0F) - 1.0F;
 
-                            d4 += d0 * (double)0.3F;
-                            d6 += d1 * (double)0.3F;
-                            d8 += d2 * (double)0.3F;
-                        }
+                        this.performRayCast(random, vecX, vecY, vecZ, touched);
                     }
                 }
             }
         }
 
-        this.affectedBlockPositions.addAll(set);
+        // Lithium world.explosions ends
+
+        // [CM] if statement around - explosionNoBlockDamage
+        if (!CarpetSettings.explosionNoBlockDamage)
+            this.affectedBlockPositions.addAll(touched);
+        // [CM] End - explosionNoBlockDamage
+
+        //TISCM cache explosions
+        if (CarpetSettings.cacheExplosions && cachedPos.x == this.x && cachedPos.y == this.y && cachedPos.z == this.z && cachedSize == this.size && cachedTick == this.world.getGameTime()) {
+            for (Entity entity : cachedMotionMap.keySet()){
+                if (cachedMotionMap.get(entity) != null){
+                    Vec3d motion = cachedMotionMap.get(entity);
+                    entity.motionX += motion.x;
+                    entity.motionY += motion.y;
+                    entity.motionZ += motion.z;
+                }
+            }
+
+            this.playerKnockbackMap.putAll(cachedKnockBackMap);
+            return;
+        }
+        //TISCM cache explosions
+        cachedMotionMap.clear();
+        cachedKnockBackMap.clear();
+
         float f3 = this.size * 2.0F;
-        int k1 = MathHelper.floor(this.x - (double)f3 - 1.0D);
-        int l1 = MathHelper.floor(this.x + (double)f3 + 1.0D);
-        int i2 = MathHelper.floor(this.y - (double)f3 - 1.0D);
-        int i1 = MathHelper.floor(this.y + (double)f3 + 1.0D);
-        int j2 = MathHelper.floor(this.z - (double)f3 - 1.0D);
-        int j1 = MathHelper.floor(this.z + (double)f3 + 1.0D);
-        List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity(this.exploder, new AxisAlignedBB((double)k1, (double)i2, (double)j2, (double)l1, (double)i1, (double)j1));
+        int k1 = MathHelper.floor(this.x - (double) f3 - 1.0D);
+        int l1 = MathHelper.floor(this.x + (double) f3 + 1.0D);
+        int i2 = MathHelper.floor(this.y - (double) f3 - 1.0D);
+        int i1 = MathHelper.floor(this.y + (double) f3 + 1.0D);
+        int j2 = MathHelper.floor(this.z - (double) f3 - 1.0D);
+        int j1 = MathHelper.floor(this.z + (double) f3 + 1.0D);
+        List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity(this.exploder, new AxisAlignedBB((double) k1, (double) i2, (double) j2, (double) l1, (double) i1, (double) j1));
         Vec3d vec3d = new Vec3d(this.x, this.y, this.z);
 
-        for (int k2 = 0; k2 < list.size(); ++k2)
-        {
+        for (int k2 = 0; k2 < list.size(); ++k2) {
             Entity entity = list.get(k2);
 
-            if (!entity.isImmuneToExplosions())
-            {
-                double d12 = entity.getDistance(this.x, this.y, this.z) / (double)f3;
+            if (!entity.isImmuneToExplosions()) {
+                double d12 = entity.getDistance(this.x, this.y, this.z) / (double) f3;
 
-                if (d12 <= 1.0D)
-                {
+                if (d12 <= 1.0D) {
                     double d5 = entity.posX - this.x;
-                    double d7 = entity.posY + (double)entity.getEyeHeight() - this.y;
+                    double d7 = entity.posY + (double) entity.getEyeHeight() - this.y;
                     double d9 = entity.posZ - this.z;
-                    double d13 = (double)MathHelper.sqrt(d5 * d5 + d7 * d7 + d9 * d9);
+                    double d13 = (double) MathHelper.sqrt(d5 * d5 + d7 * d7 + d9 * d9);
 
-                    if (d13 != 0.0D)
-                    {
+                    if (d13 != 0.0D) {
                         d5 = d5 / d13;
                         d7 = d7 / d13;
                         d9 = d9 / d13;
-                        double d14 = (double)this.world.getBlockDensity(vec3d, entity.getBoundingBox());
+                        double d14 = (double) this.world.getBlockDensity(vec3d, entity.getBoundingBox());
                         double d10 = (1.0D - d12) * d14;
-                        entity.attackEntityFrom(this.getDamageSource(), (float)((int)((d10 * d10 + d10) / 2.0D * 7.0D * (double)f3 + 1.0D)));
+                        entity.attackEntityFrom(this.getDamageSource(), (float) ((int) ((d10 * d10 + d10) / 2.0D * 7.0D * (double) f3 + 1.0D)));
                         double d11 = d10;
 
-                        if (entity instanceof EntityLivingBase)
-                        {
-                            d11 = EnchantmentProtection.getBlastDamageReduction((EntityLivingBase)entity, d10);
+                        if (entity instanceof EntityLivingBase) {
+                            d11 = EnchantmentProtection.getBlastDamageReduction((EntityLivingBase) entity, d10);
                         }
 
                         entity.motionX += d5 * d11;
                         entity.motionY += d7 * d11;
                         entity.motionZ += d9 * d11;
 
-                        if (entity instanceof EntityPlayer)
-                        {
-                            EntityPlayer entityplayer = (EntityPlayer)entity;
+                        if (CarpetSettings.cacheExplosions) {
+                            cachedMotionMap.put(entity, new Vec3d(d5 * d11, d7 * d11, d9 * d11));
+                            cachedPos = vec3d;
+                            cachedSize = this.size;
+                            cachedTick = this.world.getGameTime();
+                        }
 
-                            if (!entityplayer.isSpectator() && (!entityplayer.isCreative() || !entityplayer.abilities.isFlying))
-                            {
+                        if (entity instanceof EntityPlayer) {
+                            EntityPlayer entityplayer = (EntityPlayer) entity;
+
+                            if (!entityplayer.isSpectator() && (!entityplayer.isCreative() || !entityplayer.abilities.isFlying)) {
                                 this.playerKnockbackMap.put(entityplayer, new Vec3d(d5 * d10, d7 * d10, d9 * d10));
+                                if (CarpetSettings.cacheExplosions) {
+                                    cachedKnockBackMap.put(entityplayer, new Vec3d(d5 * d10, d7 * d10, d9 * d10));
+                                }
                             }
                         }
                     }
@@ -186,6 +212,167 @@
         }
     }
 
+    // ---------------------------------
+    //  Lithium world.explosions starts
+    // ---------------------------------
+    private void performRayCast(Random random, double vecX, double vecY, double vecZ, Set<BlockPos> touched) {
+        double dist = Math.sqrt((vecX * vecX) + (vecY * vecY) + (vecZ * vecZ));
+
+        double normX = vecX / dist;
+        double normY = vecY / dist;
+        double normZ = vecZ / dist;
+
+        float strength = this.size * (0.7F + (random.nextFloat() * 0.6F));
+
+        double stepX = this.x;
+        double stepY = this.y;
+        double stepZ = this.z;
+
+        int prevX = Integer.MIN_VALUE;
+        int prevY = Integer.MIN_VALUE;
+        int prevZ = Integer.MIN_VALUE;
+
+        float prevResistance = 0.0F;
+
+        // Step through the ray until it is finally stopped
+        while (strength > 0.0F) {
+            int blockX = MathHelper.floor(stepX);
+            int blockY = MathHelper.floor(stepY);
+            int blockZ = MathHelper.floor(stepZ);
+
+            float resistance;
+
+            // Check whether or not we have actually moved into a new block this step. Due to how rays are stepped through,
+            // over-sampling of the same block positions will occur. Changing this behaviour would introduce differences in
+            // aliasing and sampling, which is unacceptable for our purposes. As a band-aid, we can simply re-use the
+            // previous result and get a decent boost.
+            if (prevX != blockX || prevY != blockY || prevZ != blockZ) {
+                resistance = this.traverseBlock(strength, blockX, blockY, blockZ, touched);
+
+                prevX = blockX;
+                prevY = blockY;
+                prevZ = blockZ;
+
+                prevResistance = resistance;
+            } else {
+                resistance = prevResistance;
+            }
+
+            strength -= resistance;
+            // Apply a constant fall-off
+            strength -= 0.22500001F;
+
+            stepX += normX * 0.3D;
+            stepY += normY * 0.3D;
+            stepZ += normZ * 0.3D;
+        }
+    }
+
+    private Optional<Float> getExplosionResistance(BlockPos blockpos, IBlockState iblockstate, IFluidState ifluidstate)
+    {
+        if (!iblockstate.isAir() || !ifluidstate.isEmpty())
+        {
+            float f2 = Math.max(iblockstate.getBlock().getExplosionResistance(), ifluidstate.getExplosionResistance());
+
+            if (this.exploder != null)
+            {
+                f2 = this.exploder.getExplosionResistance(this, this.world, blockpos, iblockstate, ifluidstate, f2);
+            }
+
+            return Optional.of(f2);
+        }
+        return Optional.empty();
+    }
+
+    /**
+     * Called for every step made by a ray being cast by an explosion.
+     *
+     * @param strength The strength of the ray during this step
+     * @param blockX   The x-coordinate of the block the ray is inside of
+     * @param blockY   The y-coordinate of the block the ray is inside of
+     * @param blockZ   The z-coordinate of the block the ray is inside of
+     * @return The resistance of the current block space to the ray
+     */
+    private float traverseBlock(float strength, int blockX, int blockY, int blockZ, Set<BlockPos> touched) {
+        BlockPos pos = this.cachedPos$lithium.setPos(blockX, blockY, blockZ);
+
+        // Early-exit if the y-coordinate is out of bounds.
+        if (World.isOutsideBuildHeight(pos))
+        {
+            Optional<Float> blastResistance = this.getExplosionResistance(pos, Blocks.AIR.getDefaultState(), Fluids.EMPTY.getDefaultState());
+            if (blastResistance.isPresent()) {
+                return (blastResistance.get() + 0.3F) * 0.3F;
+            }
+            return 0.0F;
+        }
+
+
+        int chunkX = blockX >> 4;
+        int chunkZ = blockZ >> 4;
+
+        // Avoid calling into the chunk manager as much as possible through managing chunks locally
+        if (this.prevChunkX != chunkX || this.prevChunkZ != chunkZ) {
+            this.prevChunk = this.world.getChunk(chunkX, chunkZ);
+
+            this.prevChunkX = chunkX;
+            this.prevChunkZ = chunkZ;
+        }
+
+        final Chunk chunk = this.prevChunk;
+
+        IBlockState blockState = Blocks.AIR.getDefaultState();
+        float totalResistance = 0.0F;
+        Optional<Float> blastResistance;
+
+        labelGetBlastResistance:
+        {
+            // If the chunk is missing or out of bounds, assume that it is air
+            if (chunk != null) {
+                // We operate directly on chunk sections to avoid interacting with BlockPos and to squeeze out as much
+                // performance as possible here
+                ChunkSection section = chunk.getSections()[blockY >> 4];
+
+                // If the section doesn't exist or it's empty, assume that the block is air
+                if (section != null && !section.isEmpty()) {
+                    // Retrieve the block state from the chunk section directly to avoid associated overhead
+                    blockState = section.get(blockX & 15, blockY & 15, blockZ & 15);
+
+                    // If the block state is air, it cannot have fluid or any kind of resistance, so just leave
+                    if (blockState.getBlock() != Blocks.AIR) {
+                        // Rather than query the fluid state from the container as we just did with the block state, we can
+                        // simply ask the block state we retrieved what fluid it has. This is exactly what the call would
+                        // do anyways, except that it would have to retrieve the block state a second time, adding overhead.
+                        IFluidState fluidState = blockState.getFluidState();
+
+                        // Get the explosion resistance like vanilla
+                        blastResistance = this.getExplosionResistance(pos, blockState, fluidState);
+                        break labelGetBlastResistance;
+                    }
+                }
+            }
+            blastResistance = this.getExplosionResistance(pos, Blocks.AIR.getDefaultState(), Fluids.EMPTY.getDefaultState());
+        }
+        // Calculate how much this block will resist an explosion's ray
+        if (blastResistance.isPresent()) {
+            totalResistance = (blastResistance.get() + 0.3F) * 0.3F;
+        }
+
+        // Check if this ray is still strong enough to break blocks, and if so, add this position to the set
+        // of positions to destroy
+        float reducedStrength = strength - totalResistance;
+
+        if (reducedStrength > 0.0F && (this.exploder == null || this.exploder.canExplosionDestroyBlock(this, this.world, pos, blockState, reducedStrength)))
+        {
+            touched.add(pos.toImmutable());
+        }
+
+        return totalResistance;
+    }
+
+    // -------------------------------
+    //  Lithium world.explosions ends
+    // -------------------------------
+
     public void doExplosionB(boolean spawnParticles)
     {
         this.world.playSound((EntityPlayer)null, this.x, this.y, this.z, SoundEvents.ENTITY_GENERIC_EXPLODE, SoundCategory.BLOCKS, 4.0F, (1.0F + (this.world.rand.nextFloat() - this.world.rand.nextFloat()) * 0.2F) * 0.7F);
@@ -199,6 +386,7 @@
             this.world.addParticle(Particles.EXPLOSION, this.x, this.y, this.z, 1.0D, 0.0D, 0.0D);
         }
 
+
         if (this.damagesTerrain)
         {
             for (BlockPos blockpos : this.affectedBlockPositions)
